name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * 1'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-test-debug:
    name: build-test (Debug)
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_FORCE_SYSTEM_BINARIES: 1
      VCPKG_MAX_CONCURRENCY: 2
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y nasm ninja-build build-essential pkg-config curl zip unzip tar
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install nasm ninja pkg-config
          fi
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg/installed
            ${{ runner.os == 'Windows' && 'C:/vcpkg/buildtrees' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/installed' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/buildtrees' || '' }}
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-v2
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-${{ runner.os }}-

      - name: Setup vcpkg
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            rm -rf C:/vcpkg || true; git clone --depth 1 https://github.com/Microsoft/vcpkg.git C:/vcpkg
            cd C:/vcpkg && git config --global core.autocrlf false && cmd.exe /c "bootstrap-vcpkg.bat"
            echo "VCPKG_ROOT=C:/vcpkg" >> $GITHUB_ENV
            echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV
          else
            git clone https://github.com/Microsoft/vcpkg.git $HOME/vcpkg
            cd $HOME/vcpkg && ./bootstrap-vcpkg.sh
            echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
            if [ "$RUNNER_OS" = "Linux" ]; then
              echo "VCPKG_DEFAULT_TRIPLET=x64-linux" >> $GITHUB_ENV
            else
              echo "VCPKG_DEFAULT_TRIPLET=x64-osx" >> $GITHUB_ENV
            fi
          fi
      - name: Install ccache (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y ccache
          else
            brew update || true
            brew install ccache || true
          fi
      - name: ccache cache
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-debug-${{ hashFiles('**/CMakeLists.txt', 'vcpkg.json') }}
          restore-keys: |
            ccache-${{ runner.os }}-debug-
            ccache-${{ runner.os }}-
      - name: Configure
        shell: bash
        run: |
          echo "VCPKG_ROOT: $VCPKG_ROOT"
          echo "VCPKG_DEFAULT_TRIPLET: $VCPKG_DEFAULT_TRIPLET"
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake --preset dev-debug -DVCPKG_TARGET_TRIPLET=x64-windows
          elif [ "$RUNNER_OS" = "Linux" ]; then
            cmake --preset dev-debug -DVCPKG_TARGET_TRIPLET=x64-linux -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          else
            cmake --preset dev-debug -DVCPKG_TARGET_TRIPLET=x64-osx -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          fi
      - name: Build
        run: cmake --build --parallel 2 --preset dev-debug -j
      - name: Generate failure draft (on failure)
        if: failure()
        run: |
          python scripts/ci_failure_scrape.py --log build/dev-debug/Testing/Temporary/LastTest.log --out error_drafts --append-main --flaky-list tests/FLAKY_TESTS.txt --dedupe-window 5 --failure-history failure_history.json --auto-classify-flaky || true
          if [ -f failure_history.json ]; then
            echo "Captured failure history"; fi
      - name: Upload failure draft artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-draft-${{ matrix.os }}
          path: error_drafts
      - name: Upload profiling artifact (if present)
        if: hashFiles('build/dev-debug/profiling.json') != ''
        uses: actions/upload-artifact@v4
        with:
          name: profiling-${{ matrix.os }}
          path: build/dev-debug/profiling.json
          if-no-files-found: ignore
      - name: Coverage (Linux only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update && sudo apt-get install -y lcov
          lcov --capture --directory build/dev-debug --output-file coverage.info || true
          lcov --remove coverage.info '/usr/*' '*/vcpkg_installed/*' --output-file coverage.info || true
      - name: Upload coverage artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage.info
      - name: ccache stats
        if: runner.os != 'Windows'
        run: ccache -s || true

  build-test-release:
    name: build-test (Release)
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      VCPKG_FORCE_SYSTEM_BINARIES: 1
      VCPKG_MAX_CONCURRENCY: 2
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y nasm ninja-build build-essential pkg-config curl zip unzip tar
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew install nasm ninja pkg-config
          fi
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg/installed
            ${{ runner.os == 'Windows' && 'C:/vcpkg/buildtrees' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/installed' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/buildtrees' || '' }}
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-v2
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-${{ runner.os }}-

      - name: Setup vcpkg
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            rm -rf C:/vcpkg || true; git clone --depth 1 https://github.com/Microsoft/vcpkg.git C:/vcpkg
            cd C:/vcpkg && git config --global core.autocrlf false && cmd.exe /c "bootstrap-vcpkg.bat"
            echo "VCPKG_ROOT=C:/vcpkg" >> $GITHUB_ENV
            echo "VCPKG_DEFAULT_TRIPLET=x64-windows" >> $GITHUB_ENV
          else
            git clone https://github.com/Microsoft/vcpkg.git $HOME/vcpkg
            cd $HOME/vcpkg && ./bootstrap-vcpkg.sh
            echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
            if [ "$RUNNER_OS" = "Linux" ]; then
              echo "VCPKG_DEFAULT_TRIPLET=x64-linux" >> $GITHUB_ENV
            else
              echo "VCPKG_DEFAULT_TRIPLET=x64-osx" >> $GITHUB_ENV
            fi
          fi
      - name: Install ccache (Unix)
        if: runner.os != 'Windows'
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            sudo apt-get update && sudo apt-get install -y ccache
          else
            brew update || true
            brew install ccache || true
          fi
      - name: ccache cache
        if: runner.os != 'Windows'
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-${{ runner.os }}-release-${{ hashFiles('**/CMakeLists.txt', 'vcpkg.json') }}
          restore-keys: |
            ccache-${{ runner.os }}-release-
            ccache-${{ runner.os }}-
      - name: Configure
        shell: bash
        run: |
          echo "VCPKG_ROOT: $VCPKG_ROOT"
          echo "VCPKG_DEFAULT_TRIPLET: $VCPKG_DEFAULT_TRIPLET"
          if [ "$RUNNER_OS" = "Windows" ]; then
            cmake --preset dev-release -DVCPKG_TARGET_TRIPLET=x64-windows
          elif [ "$RUNNER_OS" = "Linux" ]; then
            cmake --preset dev-release -DVCPKG_TARGET_TRIPLET=x64-linux -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          else
            cmake --preset dev-release -DVCPKG_TARGET_TRIPLET=x64-osx -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          fi
      - name: Build
        run: cmake --build --parallel 2 --preset dev-release -j
      - name: Upload release build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-Release
          path: build/dev-release
      - name: ccache stats
        if: runner.os != 'Windows'
        run: ccache -s || true

  lint-configure:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build build-essential cmake
      - name: Simple configure test (no FFmpeg, no presets)
        run: |
          mkdir -p build/lint-test
          cd build/lint-test
          cmake ../.. -GNinja -DCMAKE_BUILD_TYPE=Debug -DENABLE_FFMPEG=OFF -DENABLE_TESTS=OFF -DENABLE_TOOLS=OFF

  clang-tidy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm ninja-build build-essential pkg-config curl zip unzip tar clang-tidy
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg/installed
            ${{ runner.os == 'Windows' && 'C:/vcpkg/buildtrees' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/installed' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/buildtrees' || '' }}
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-v2
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-${{ runner.os }}-

      - name: Setup vcpkg
        shell: bash
        run: |
          git clone https://github.com/Microsoft/vcpkg.git $HOME/vcpkg
          cd $HOME/vcpkg && ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-linux" >> $GITHUB_ENV
      - name: Configure
        run: cmake --preset dev-debug -DVCPKG_TARGET_TRIPLET=x64-linux
      - name: Run clang-tidy
        run: python3 scripts/clang_tidy_check.py

  quality-gate:
    name: quality-gate
    runs-on: ubuntu-latest
    needs: [build-test-debug, build-test-release, lint-configure, clang-tidy]
    permissions:
      actions: read
      contents: read
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v4
      - name: Install gh & jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq
          sudo apt-get install -y git
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg || true
          sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg || true
      - name: Fetch recent CI runs (main)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh api repos/${{ github.repository }}/actions/runs -F branch=main -F per_page=30 > runs_raw.json
          jq '{runs: [.workflow_runs[] | {status, conclusion, updated_at}]}' runs_raw.json > runs.json
      - name: Evaluate quality gate
        run: |
          python scripts/ci_quality_gate.py --runs runs.json --window 20 --metrics-out gate_metrics.json --badge-out gate_badge.json > gate.json
          cat gate.json
          echo "GATE_STATUS=$(jq -r '.status' gate.json)" >> $GITHUB_ENV
          echo "CONSEC_FAILS=$(jq -r '.consecutive_fails' gate.json)" >> $GITHUB_ENV
          echo "MTTR_MIN=$(jq -r '.mttr_minutes // 0' gate_metrics.json)" >> $GITHUB_ENV
      - name: Ensure labels exist
        run: |
          gh label create quality-watch --color ededed --description "Quality gate WARN/FAIL" 2>/dev/null || true
          gh label create needs-stabilize --color ffaaaa --description "Required during quality FAIL" 2>/dev/null || true
      - name: Update PR labels/comments
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Gate status: $GATE_STATUS"
          PRS=$(gh pr list -B main --state open --json number,labels | jq -c '.[]') || exit 0
          for pr in $PRS; do
            NUM=$(echo "$pr" | jq -r '.number')
            HAS_QW=$(echo "$pr" | jq -r '.labels[].name? // empty' | grep -i '^quality-watch$' || true)
            if [ "$GATE_STATUS" = "PASS" ]; then
              if [ -n "$HAS_QW" ]; then
                gh pr edit $NUM --remove-label quality-watch || true
              fi
            elif [ "$GATE_STATUS" = "WARN" ]; then
              if [ -z "$HAS_QW" ]; then
                gh pr edit $NUM --add-label quality-watch || true
                gh pr comment $NUM --body "CI quality gate WARN: success rate below threshold. Label applied." || true
              fi
            else # FAIL
              if [ -z "$HAS_QW" ]; then
                gh pr edit $NUM --add-label quality-watch || true
              fi
              gh pr comment $NUM --body "CI quality gate FAIL: merges require remediation plan. Apply 'needs-stabilize' with plan steps (root-cause hypothesis, rollback/fix path)." || true
            fi
          done
      - name: Enforce stabilize label on FAIL PR merges
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "$GATE_STATUS" != "FAIL" ]; then echo "Gate not FAIL; skip stabilize enforcement"; exit 0; fi
          PRS=$(gh pr list -B main --state open --json number,labels | jq -c '.[]') || exit 0
          for pr in $PRS; do
            NUM=$(echo "$pr" | jq -r '.number')
            HAS_STAB=$(echo "$pr" | jq -r '.labels[].name? // empty' | grep -i '^needs-stabilize$' || true)
            if [ -z "$HAS_STAB" ]; then
              gh pr comment $NUM --body "Gate=FAIL: add 'needs-stabilize' with remediation plan to proceed." || true
            fi
          done
          echo "Stabilize enforcement completed"
      - name: Fail if gate status FAIL
        run: |
          if [ "$GATE_STATUS" = "FAIL" ]; then
            echo "Quality gate FAIL" >&2
            exit 1
          fi
      - name: Upload gate metrics & badge
        uses: actions/upload-artifact@v4
        with:
          name: gate-metrics
          path: |
            gate_metrics.json
            gate_badge.json
      - name: Generate & commit MTTR + MTTR-only badges (main only)
        if: github.ref == 'refs/heads/main'
        run: |
          set -e
          mkdir -p .badges
          PCT=$(jq -r '.success_rate' gate_metrics.json | awk '{printf "%d", ($1*100)+0.5}')
          STATUS=$(jq -r '.status' gate_metrics.json)
          MTTR=$(jq -r '.mttr_minutes // 0' gate_metrics.json)
          # Derive color with MTTR sensitivity
          if [ "$STATUS" = "FAIL" ]; then COLOR=red
          elif [ "$STATUS" = "WARN" ]; then COLOR=orange
          else
            if [ "$MTTR" -le 10 ]; then COLOR=green
            elif [ "$MTTR" -le 30 ]; then COLOR=yellowgreen
            else COLOR=orange; fi
          fi
          # Map color name to base hex for gradient stops (simple hand-tuned palette)
          case "$COLOR" in
            red) G1="#ff6e5a"; G2="#d63c2c" ;;
            orange) G1="#ffa24d"; G2="#fe7d37" ;;
            yellowgreen) G1="#c1d148"; G2="#9ca617" ;;
            green) G1="#5ad21b"; G2="#2f7d0a" ;;
            *) G1="#cccccc"; G2="#999999" ;;
          esac
          MSG="$STATUS ${PCT}% / MTTR ${MTTR}m"
          CHAR_COUNT=${#MSG}
          WIDTH=$((70 + CHAR_COUNT * 7))
          LABEL_WIDTH=50
          RIGHT_WIDTH=$((WIDTH - LABEL_WIDTH))
          CENTER_X=$((LABEL_WIDTH + RIGHT_WIDTH / 2))
          printf "<svg xmlns='http://www.w3.org/2000/svg' width='%d' height='20' role='img' aria-label='ci status'>" $WIDTH > .badges/ci_status.svg
          printf "<defs><linearGradient id='grad' x1='0' y1='0' x2='1' y2='1'><stop offset='0%%' stop-color='%s'/><stop offset='100%%' stop-color='%s'/></linearGradient><linearGradient id='s' x2='0' y2='100%%'><stop offset='0' stop-color='#bbb' stop-opacity='.1'/><stop offset='1' stop-opacity='.1'/></linearGradient></defs>" "$G1" "$G2" >> .badges/ci_status.svg
          printf "<mask id='m'><rect width='%d' height='20' rx='3' fill='#fff'/></mask>" $WIDTH >> .badges/ci_status.svg
            # Left: static dark label, Right: gradient fill using derived colors
          printf "<g mask='url(#m)'><rect width='%d' height='20' fill='#555'/><rect x='%d' width='%d' height='20' fill='url(#grad)'/><rect width='%d' height='20' fill='url(#s)'/></g>" $LABEL_WIDTH $LABEL_WIDTH $RIGHT_WIDTH $WIDTH >> .badges/ci_status.svg
          printf "<g fill='#fff' text-anchor='middle' font-family='Verdana,DejaVu Sans,sans-serif' font-size='11'><text x='%d' y='14'>ci</text><text x='%d' y='14'>%s</text></g></svg>" $((LABEL_WIDTH/2)) $CENTER_X "$MSG" >> .badges/ci_status.svg

          # Separate MTTR-only badge
          MTTR_LABEL=mttr
          MTTR_MSG="${MTTR}m"
          MTTR_WIDTH=90
          MTTR_LABEL_WIDTH=50
          MTTR_RIGHT_WIDTH=$((MTTR_WIDTH - MTTR_LABEL_WIDTH))
          # Color scale dedicated to MTTR minutes
          if [ "$MTTR" -le 10 ]; then M_COLOR=green
          elif [ "$MTTR" -le 30 ]; then M_COLOR=yellowgreen
          elif [ "$MTTR" -le 60 ]; then M_COLOR=orange
          else M_COLOR=red; fi
          case "$M_COLOR" in
            red) MG1="#ff6e5a"; MG2="#d63c2c" ;;
            orange) MG1="#ffa24d"; MG2="#fe7d37" ;;
            yellowgreen) MG1="#c1d148"; MG2="#9ca617" ;;
            green) MG1="#5ad21b"; MG2="#2f7d0a" ;;
            *) MG1="#cccccc"; MG2="#999999" ;;
          esac
          printf "<svg xmlns='http://www.w3.org/2000/svg' width='%d' height='20' role='img' aria-label='ci mttr'>" $MTTR_WIDTH > .badges/ci_mttr.svg
          printf "<defs><linearGradient id='gradm' x1='0' y1='0' x2='1' y2='1'><stop offset='0%%' stop-color='%s'/><stop offset='100%%' stop-color='%s'/></linearGradient><linearGradient id='sm' x2='0' y2='100%%'><stop offset='0' stop-color='#bbb' stop-opacity='.1'/><stop offset='1' stop-opacity='.1'/></linearGradient></defs>" "$MG1" "$MG2" >> .badges/ci_mttr.svg
          printf "<mask id='mm'><rect width='%d' height='20' rx='3' fill='#fff'/></mask>" $MTTR_WIDTH >> .badges/ci_mttr.svg
          printf "<g mask='url(#mm)'><rect width='%d' height='20' fill='#555'/><rect x='%d' width='%d' height='20' fill='url(#gradm)'/><rect width='%d' height='20' fill='url(#sm)'/></g>" $MTTR_LABEL_WIDTH $MTTR_LABEL_WIDTH $MTTR_RIGHT_WIDTH $MTTR_WIDTH >> .badges/ci_mttr.svg
          printf "<g fill='#fff' text-anchor='middle' font-family='Verdana,DejaVu Sans,sans-serif' font-size='11'><text x='%d' y='14'>mttr</text><text x='%d' y='14'>%s</text></g></svg>" $((MTTR_LABEL_WIDTH/2)) $((MTTR_LABEL_WIDTH + MTTR_RIGHT_WIDTH / 2)) "$MTTR_MSG" >> .badges/ci_mttr.svg
          if git show HEAD:.badges/ci_status.svg > old_badge 2>/dev/null; then
            if diff -q old_badge .badges/ci_status.svg >/dev/null; then echo 'No badge change'; exit 0; fi
            OLD=$(grep -oE '>[A-Z]+ [0-9]+% / MTTR [0-9]+m<' old_badge | head -n1 | tr -d '<>') || true
            NEW=$(grep -oE '>[A-Z]+ [0-9]+% / MTTR [0-9]+m<' .badges/ci_status.svg | head -n1 | tr -d '<>') || true
            if [ -n "$OLD" ] && [ -n "$NEW" ]; then
              OPCT=$(echo $OLD | awk '{print $2}' | tr -d '%')
              NPCT=$(echo $NEW | awk '{print $2}' | tr -d '%')
              OSTAT=$(echo $OLD | awk '{print $1}')
              NSTAT=$(echo $NEW | awk '{print $1}')
              OMTTR=$(echo $OLD | awk '{print $5}' | tr -d 'm')
              NMTTR=$(echo $NEW | awk '{print $5}' | tr -d 'm')
              if [ "$OPCT" = "$NPCT" ] && [ "$OSTAT" = "$NSTAT" ]; then
                DIFF=$((OMTTR - NMTTR)); [ $DIFF -lt 0 ] && DIFF=$((-DIFF))
                if [ $DIFF -le 1 ]; then echo 'Skipping commit (MTTR +/-1m only)'; exit 0; fi
              fi
            fi
          fi
          git config user.name 'ci-badge-bot'
          git config user.email 'ci-badge-bot@users.noreply.github.com'
          git add .badges/ci_status.svg .badges/ci_mttr.svg gate_metrics.json gate_badge.json
          git commit -m 'chore: update CI badges (status + MTTR)' || exit 0
          git push
      - name: Auto stabilization draft PR
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          if [ "$GATE_STATUS" != "FAIL" ]; then echo "Gate not FAIL; skip stabilization draft PR"; exit 0; fi
          FPRINT=$(grep -m1 '### Fingerprint' -A1 ERROR_TRACKING.md 2>/dev/null | tail -n1 | tr -d '`' || true)
          python scripts/auto_draft_ci_issue.py --gate-metrics gate_metrics.json --consecutive ${CONSEC_FAILS} --fingerprint "$FPRINT" || true

  flaky-quarantine:
    name: flaky-quarantine
    runs-on: ubuntu-latest
    needs: [build-test-debug]
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y nasm ninja-build build-essential pkg-config curl zip unzip tar
      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            C:/vcpkg/installed
            ${{ runner.os == 'Windows' && 'C:/vcpkg/buildtrees' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/installed' || '' }}
            ${{ runner.os != 'Windows' && '$HOME/vcpkg/buildtrees' || '' }}
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-v2
          restore-keys: |
            vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}-
            vcpkg-${{ runner.os }}-

      - name: Setup vcpkg
        shell: bash
        run: |
          git clone https://github.com/Microsoft/vcpkg.git $HOME/vcpkg
          cd $HOME/vcpkg && ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-linux" >> $GITHUB_ENV
      - name: Install ccache
        run: sudo apt-get update && sudo apt-get install -y ccache
      - name: ccache cache
        uses: actions/cache@v4
        with:
            path: ~/.ccache
            key: ccache-linux-flaky-${{ hashFiles('**/CMakeLists.txt', 'vcpkg.json') }}
            restore-keys: |
              ccache-linux-flaky-
              ccache-linux-
      - name: Configure (debug)
        run: cmake --preset dev-debug -DVCPKG_TARGET_TRIPLET=x64-linux -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
      - name: Build tests
        run: cmake --build --parallel 2 --preset dev-debug -j
      - name: Run flaky quarantine
        run: |
          PR_NUM=0
          if [ "${{ github.event_name }}" = "pull_request" ]; then PR_NUM=${{ github.event.number }}; fi
          python scripts/run_flaky_quarantine.py --repeat 5 --state-file .flaky_quarantine_state.json --clean-threshold 3 --pr-number $PR_NUM --comment-persist-failures || true
      - name: Upload flaky quarantine artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flaky-quarantine
          path: |
            flaky_quarantine_report.json
            flaky_quarantine_output.txt
            .flaky_quarantine_state.json
            flaky_instability_sparkline.txt




