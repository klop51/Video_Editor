name: build-windows-self-hosted
"on":
  push:
    tags: [ "v*" ]
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows-self-hosted:
    name: Self-Hosted Windows ${{ matrix.config }} build
    runs-on: [self-hosted, windows]
    strategy:
      fail-fast: false
      matrix:
        config: [ Debug, Release ]
    env:
      # Optimized for self-hosted runner
      VCPKG_MAX_CONCURRENCY: 8  # Use more cores on dedicated hardware
      VCPKG_ROOT: C:/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows
      # Video Editor specific environment
      VE_ENABLE_DETAILED_PROFILING: 1
      VE_ENABLE_PBO_UPLOAD: 1
      # Disable Windows Defender scanning during build
      POWERSHELL_TELEMETRY_OPTOUT: 1
    
    steps:
      - name: Cleanup workspace
        shell: cmd
        run: |
          REM Clean up any previous build artifacts
          echo Cleaning workspace...
          if exist build rmdir /s /q build
          for /f %%i in ('dir /b /a-d *.log 2^>nul') do del /q "%%i"
          echo Workspace cleaned
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Install Windows SDK (if missing)
        shell: cmd
        run: |
          echo Checking for Windows SDK RC compiler...
          
          REM Check if RC compiler is available
          where rc >nul 2>&1
          if %ERRORLEVEL% EQU 0 (
            echo RC compiler found in PATH
            goto :skip_sdk_install
          )
          
          REM Check for RC in Windows SDK paths - try latest version first
          if exist "C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\rc.exe" (
            echo Windows SDK RC found at 10.0.26100.0
            goto :skip_sdk_install
          ) else if exist "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\rc.exe" (
            echo Windows SDK RC found at 10.0.22621.0
            goto :skip_sdk_install
          )
          
          echo RC compiler not found, checking for any Windows SDK...
          if exist "C:\Program Files (x86)\Windows Kits\10\bin" (
            echo Windows SDK directory exists, checking versions...
            dir "C:\Program Files (x86)\Windows Kits\10\bin" /B
          ) else (
            echo No Windows SDK found, installing...
            curl -L -o winsdksetup.exe "https://go.microsoft.com/fwlink/?linkid=2196241"
            echo Installing Windows 11 SDK 22H2...
            winsdksetup.exe /quiet /installpath "C:\Program Files (x86)\Windows Kits\10"
            echo Windows SDK installation completed
          )
          
          :skip_sdk_install
          echo Windows SDK check complete
          exit /b 0

      - name: Setup build environment
        shell: cmd
        run: |
          echo Setting up build environment...
          
          REM Check and install vcpkg if not found
          if not exist "C:\vcpkg\vcpkg.exe" (
            echo vcpkg not found, installing...
            if exist "C:\vcpkg" rmdir /s /q "C:\vcpkg"
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
            cd /d C:\vcpkg
            call bootstrap-vcpkg.bat
            vcpkg integrate install
            cd /d %GITHUB_WORKSPACE%
          )
          echo vcpkg found at C:\vcpkg
          
          REM Set environment variables for GitHub Actions
          echo CMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake>> %GITHUB_ENV%
          echo VCPKG_INSTALLED_DIR=%GITHUB_WORKSPACE%/build/vcpkg_installed>> %GITHUB_ENV%
          
          REM Comprehensive Visual Studio detection
          echo Checking for Visual Studio installation...
          set VS_FOUND=false
          
          if exist "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Enterprise found
            set VS_FOUND=true
          ) else if exist "%ProgramFiles%\Microsoft Visual Studio\2022\Professional\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Professional found  
            set VS_FOUND=true
          ) else if exist "%ProgramFiles%\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Community found
            set VS_FOUND=true
          ) else if exist "%ProgramFiles%\Microsoft Visual Studio\2022\BuildTools\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Build Tools found
            set VS_FOUND=true
          ) else (
            echo WARNING: Visual Studio 2022 not found in standard locations
            echo Attempting to use Build Tools or Windows SDK...
            REM Try to find Windows SDK or fallback options
            if exist "C:\PROGRA~2\Windows Kits\10" (
              echo Windows 10 SDK found - may work for basic builds
            ) else (
              echo ERROR: No suitable build tools found
              echo Please install Visual Studio 2022 Community or Build Tools
              exit /b 1
            )
          )
          
          REM Set up Windows SDK environment
          echo Setting up Windows SDK environment...
          echo Adding standard Windows SDK paths to PATH
          echo PATH=C:/PROGRA~2/WINDOW~1/10/bin/10.0.26100.0/x64;C:/PROGRA~2/WINDOW~1/10/bin/10.0.22621.0/x64;%PATH%>> %GITHUB_ENV%
          echo Windows SDK environment setup complete
          
          echo Build environment setup complete

      - name: Cache vcpkg dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/vcpkg_installed
            C:/vcpkg/buildtrees
          key: vcpkg-self-hosted-${{ hashFiles('vcpkg.json') }}-v4
          restore-keys: |
            vcpkg-self-hosted-${{ hashFiles('vcpkg.json') }}-
            vcpkg-self-hosted-

      - name: Configure CMake
        shell: cmd
        run: |
          echo Configuring for ${{ matrix.config }} build...
          
          if "${{ matrix.config }}"=="Debug" (
            "C:\Program Files\CMake\bin\cmake.exe" --preset qt-debug
          ) else (
            "C:\Program Files\CMake\bin\cmake.exe" --preset vs-release
          )

      - name: Build Video Editor
        shell: cmd
        run: |
          echo Building Video Editor (${{ matrix.config }})...
          
          REM Clear any file locks and ensure clean build environment
          echo Cleaning up previous build artifacts...
          if "${{ matrix.config }}"=="Debug" (
            if exist "build\qt-debug\src\tools\video_editor\Debug" (
              echo Removing Debug output directory...
              rmdir /s /q "build\qt-debug\src\tools\video_editor\Debug" 2>nul || echo Directory cleanup attempted
            )
          ) else (
            if exist "build\vs-release\src\tools\video_editor\Release" (
              echo Removing Release output directory...
              rmdir /s /q "build\vs-release\src\tools\video_editor\Release" 2>nul || echo Directory cleanup attempted
            )
          )
          
          REM Kill any processes that might be holding file locks
          taskkill /F /IM video_editor.exe 2>nul || echo No video_editor processes to kill
          taskkill /F /IM ve_qt_preview.exe 2>nul || echo No preview processes to kill
          
          REM Wait a moment for files to be released
          timeout /t 2 /nobreak >nul
          
          REM Use maximum parallel jobs for self-hosted runner
          set CORES=%NUMBER_OF_PROCESSORS%
          echo Using %CORES% parallel jobs
          
          if "${{ matrix.config }}"=="Debug" (
            "C:\Program Files\CMake\bin\cmake.exe" --build build/qt-debug --config Debug --parallel %CORES%
          ) else (
            "C:\Program Files\CMake\bin\cmake.exe" --build build/vs-release --config Release --parallel %CORES%
          )

      - name: Run Unit Tests
        shell: powershell
        run: |
          Write-Host "Running unit tests..." -ForegroundColor Green
          
          if ("${{ matrix.config }}" -eq "Debug") {
            $testPath = "build/qt-debug/tests/Debug"
          } else {
            $testPath = "build/qt-release/tests/Release"
          }
          
          if (Test-Path "$testPath/unit_tests.exe") {
            & "$testPath/unit_tests.exe" --reporter=xml --out=test-results-${{ matrix.config }}.xml
          } else {
            Write-Warning "Unit tests executable not found at $testPath"
          }

      - name: Run GPU Validation Tests
        shell: powershell
        run: |
          Write-Host "Running GPU system validation..." -ForegroundColor Green
          
          if ("${{ matrix.config }}" -eq "Debug") {
            $testPath = "build/qt-debug/tests/Debug"
          } else {
            $testPath = "build/qt-release/tests/Release"
          }
          
          if (Test-Path "$testPath/gpu_system_validation.exe") {
            & "$testPath/gpu_system_validation.exe" | Tee-Object -FilePath "gpu-validation-${{ matrix.config }}.log"
            
            # Check if GPU validation passed
            $lastExitCode = $LASTEXITCODE
            if ($lastExitCode -eq 0) {
              Write-Host "✅ GPU validation passed" -ForegroundColor Green
            } else {
              Write-Warning "⚠️ GPU validation failed with exit code $lastExitCode"
            }
          }

      - name: Performance Validation
        if: matrix.config == 'Release'
        shell: powershell
        run: |
          Write-Host "Running performance validation..." -ForegroundColor Green
          
          $perfTest = "build/qt-release/tests/Release/performance_optimizer_validation.exe"
          if (Test-Path $perfTest) {
            & $perfTest | Tee-Object -FilePath "performance-validation.log"
          }

      - name: Package Application
        shell: powershell
        run: |
          Write-Host "Packaging Video Editor application..." -ForegroundColor Green
          
          $config = "${{ matrix.config }}"
          $buildDir = if ($config -eq "Debug") { "build/qt-debug" } else { "build/qt-release" }
          $packageDir = "VideoEditor-Windows-$config"
          
          # Create package directory
          New-Item -ItemType Directory -Path $packageDir -Force
          
          # Copy main executable and dependencies
          $exePath = "$buildDir/src/tools/video_editor/$config"
          if (Test-Path $exePath) {
            Copy-Item -Path "$exePath/*" -Destination $packageDir -Recurse -Force
          }
          
          # Copy tools
          $toolsPath = "$buildDir/src/tools"
          Get-ChildItem $toolsPath -Directory | ForEach-Object {
            $toolExe = Join-Path $_.FullName "$config"
            if (Test-Path $toolExe) {
              $toolName = $_.Name
              New-Item -ItemType Directory -Path "$packageDir/tools/$toolName" -Force
              Copy-Item -Path "$toolExe/*" -Destination "$packageDir/tools/$toolName" -Recurse -Force
            }
          }
          
          # Copy documentation
          Copy-Item -Path "README.md", "*.md" -Destination $packageDir -Force -ErrorAction SilentlyContinue
          
          # Create archive
          Compress-Archive -Path $packageDir -DestinationPath "$packageDir.zip" -Force
          
          Write-Host "✅ Package created: $packageDir.zip"

      - name: Validate Package
        shell: powershell
        run: |
          Write-Host "Validating packaged application..." -ForegroundColor Green
          
          $config = "${{ matrix.config }}"
          $packageDir = "VideoEditor-Windows-$config"
          
          # Test that main executable runs
          $mainExe = "$packageDir/video_editor.exe"
          if (Test-Path $mainExe) {
            Write-Host "Testing main executable..."
            # Run with --version flag if supported, or just test it loads
            & $mainExe --help 2>$null | Out-Null
            if ($LASTEXITCODE -eq 0) {
              Write-Host "✅ Main executable validated"
            } else {
              Write-Host "⚠️ Main executable test inconclusive (exit code $LASTEXITCODE)"
            }
          }
          
          # Check for required DLLs
          $requiredDlls = @("Qt6Core.dll", "Qt6Gui.dll", "Qt6Widgets.dll", "avcodec-61.dll")
          foreach ($dll in $requiredDlls) {
            if (Test-Path "$packageDir/$dll") {
              Write-Host "✅ Found required DLL: $dll"
            } else {
              Write-Warning "❌ Missing required DLL: $dll"
            }
          }

      - name: Collect Artifacts
        if: always()
        shell: cmd
        run: |
          REM Collect build logs and profiling data
          echo Creating artifacts directory...
          mkdir artifacts-${{ matrix.config }} 2>nul
          
          REM Copy profiling data
          if exist profiling*.json (
            for %%f in (profiling*.json) do copy "%%f" artifacts-${{ matrix.config }}\
          )
          
          REM Copy test results  
          if exist *test*.xml (
            for %%f in (*test*.xml) do copy "%%f" artifacts-${{ matrix.config }}\
          )
          
          REM Copy validation logs
          if exist *validation*.log (
            for %%f in (*validation*.log) do copy "%%f" artifacts-${{ matrix.config }}\
          )
          
          REM Copy CMake logs on failure
          if "%BUILD_FAILED%"=="true" (
            if exist build\*\CMakeFiles\CMakeOutput.log (
              for %%f in (build\*\CMakeFiles\CMakeOutput.log) do copy "%%f" artifacts-${{ matrix.config }}\
            )
          )
          
          echo Artifacts collected

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: video-editor-windows-${{ matrix.config }}-${{ github.run_number }}
          path: |
            VideoEditor-Windows-${{ matrix.config }}.zip
            artifacts-${{ matrix.config }}
          retention-days: 30

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-windows-${{ matrix.config }}-${{ github.run_number }}
          path: |
            test-results-*.xml
            *validation*.log
          if-no-files-found: ignore

      - name: Performance Report
        if: matrix.config == 'Release'
        shell: powershell
        run: |
          Write-Host "=== Performance Summary ===" -ForegroundColor Cyan
          
          # Check if profiling data exists
          if (Test-Path "profiling.json") {
            $profiling = Get-Content "profiling.json" | ConvertFrom-Json
            Write-Host "Build completed with performance data available"
            
            # Extract key metrics if available
            if ($profiling.frame_time_ms) {
              Write-Host "Average frame time: $($profiling.frame_time_ms) ms"
            }
          }
          
          # Check build time (approximate)
          $buildTime = (Get-Date) - (Get-Date $env:GITHUB_RUN_STARTED_AT)
          Write-Host "Total build time: $($buildTime.ToString('mm\:ss'))"

      - name: Cleanup Build Directory
        if: always()
        shell: cmd
        run: |
          REM Clean up large build files to save runner disk space
          REM Keep only essential artifacts that were already uploaded
          
          echo Cleaning up build directory...
          
          REM Remove intermediate build files but keep packaged artifacts
          if exist build (
            echo Removing CMake intermediate files...
            for /d /r build %%d in (CMakeFiles) do (
              if exist "%%d" rmdir /s /q "%%d" 2>nul
            )
            
            echo Removing object files and temporary build artifacts...
            del /s /q build\*.obj 2>nul
            del /s /q build\*.pdb 2>nul  
            del /s /q build\*.exp 2>nul
            del /s /q build\*.lib 2>nul
          )
          
          echo Cleanup completed

  notify-status:
    name: Build Status Notification
    runs-on: [self-hosted, windows]
    needs: build-windows-self-hosted
    if: always()
    steps:
      - name: Report Build Status
        shell: cmd
        run: |
          set status=${{ needs.build-windows-self-hosted.result }}
          set runUrl=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          echo === Build Complete ===
          echo Status: %status%
          echo Run URL: %runUrl%
          echo Commit: ${{ github.sha }}
          echo Branch: ${{ github.ref_name }}
          echo.
          
          if "%status%"=="success" (
            echo All builds completed successfully!
          ) else (
            echo Build failed - check artifacts for details
          )