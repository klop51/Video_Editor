name: build-windows-self-hosted
"on":
  push:
    tags: [ "v*" ]
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-windows-self-hosted:
    name: Self-Hosted Windows ${{ matrix.config }} build
    runs-on: [self-hosted, windows]
    strategy:
      fail-fast: false
      matrix:
        config: [ Debug, Release ]
    env:
      # Optimized for self-hosted runner
      VCPKG_MAX_CONCURRENCY: 8  # Use more cores on dedicated hardware
      VCPKG_ROOT: C:/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-windows
      # Video Editor specific environment
      VE_ENABLE_DETAILED_PROFILING: 1
      VE_ENABLE_PBO_UPLOAD: 1
      # Disable Windows Defender scanning during build
      POWERSHELL_TELEMETRY_OPTOUT: 1
    
    steps:
      - name: Cleanup workspace
        shell: cmd
        run: |
          REM Clean up any previous build artifacts
          echo Cleaning workspace...
          if exist build rmdir /s /q build
          for /f %%i in ('dir /b /a-d *.log 2^>nul') do del /q "%%i"
          echo Workspace cleaned
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for proper versioning

      - name: Install Windows SDK (if missing)
        shell: cmd
        run: |
          echo Checking for Windows SDK RC compiler...
          
          REM Check if RC compiler is available
          where rc >nul 2>&1
          if %ERRORLEVEL% EQU 0 (
            echo RC compiler found in PATH
            goto :skip_sdk_install
          )
          
          REM Check for RC in Windows SDK paths - try latest version first
          if exist "C:\Program Files (x86)\Windows Kits\10\bin\10.0.26100.0\x64\rc.exe" (
            echo Windows SDK RC found at 10.0.26100.0
            goto :skip_sdk_install
          ) else if exist "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\rc.exe" (
            echo Windows SDK RC found at 10.0.22621.0
            goto :skip_sdk_install
          )
          
          echo RC compiler not found, checking for any Windows SDK...
          if exist "C:\Program Files (x86)\Windows Kits\10\bin" (
            echo Windows SDK directory exists, checking versions...
            dir "C:\Program Files (x86)\Windows Kits\10\bin" /B
          ) else (
            echo No Windows SDK found, installing...
            curl -L -o winsdksetup.exe "https://go.microsoft.com/fwlink/?linkid=2196241"
            echo Installing Windows 11 SDK 22H2...
            winsdksetup.exe /quiet /installpath "C:\Program Files (x86)\Windows Kits\10"
            echo Windows SDK installation completed
          )
          
          :skip_sdk_install
          echo Windows SDK check complete
          exit /b 0

      - name: Setup build environment
        shell: cmd
        run: |
          echo Setting up build environment...
          
          REM Check and install vcpkg if not found
          if not exist "C:\vcpkg\vcpkg.exe" (
            echo vcpkg not found, installing...
            if exist "C:\vcpkg" rmdir /s /q "C:\vcpkg"
            git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
            cd /d C:\vcpkg
            call bootstrap-vcpkg.bat
            vcpkg integrate install
            cd /d %GITHUB_WORKSPACE%
          )
          echo vcpkg found at C:\vcpkg
          
          REM Set environment variables for GitHub Actions
          echo CMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake>> %GITHUB_ENV%
          echo VCPKG_INSTALLED_DIR=%GITHUB_WORKSPACE%/build/vcpkg_installed>> %GITHUB_ENV%
          
          REM Comprehensive Visual Studio detection
          echo Checking for Visual Studio installation...
          set VS_FOUND=false
          
          if exist "%ProgramFiles%\Microsoft Visual Studio\2022\Enterprise\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Enterprise found
            set VS_FOUND=true
          ) else if exist "%ProgramFiles%\Microsoft Visual Studio\2022\Professional\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Professional found  
            set VS_FOUND=true
          ) else if exist "%ProgramFiles%\Microsoft Visual Studio\2022\Community\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Community found
            set VS_FOUND=true
          ) else if exist "%ProgramFiles%\Microsoft Visual Studio\2022\BuildTools\Common7\IDE\devenv.exe" (
            echo Visual Studio 2022 Build Tools found
            set VS_FOUND=true
          ) else (
            echo WARNING: Visual Studio 2022 not found in standard locations
            echo Attempting to use Build Tools or Windows SDK...
            REM Try to find Windows SDK or fallback options
            if exist "C:\PROGRA~2\Windows Kits\10" (
              echo Windows 10 SDK found - may work for basic builds
            ) else (
              echo ERROR: No suitable build tools found
              echo Please install Visual Studio 2022 Community or Build Tools
              exit /b 1
            )
          )
          
          REM Set up Windows SDK environment
          echo Setting up Windows SDK environment...
          echo Adding standard Windows SDK paths to PATH
          echo PATH=C:/PROGRA~2/WINDOW~1/10/bin/10.0.26100.0/x64;C:/PROGRA~2/WINDOW~1/10/bin/10.0.22621.0/x64;%PATH%>> %GITHUB_ENV%
          echo Windows SDK environment setup complete
          
          echo Build environment setup complete

      - name: Cache vcpkg dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/vcpkg_installed
            C:/vcpkg/buildtrees
          key: vcpkg-self-hosted-${{ hashFiles('vcpkg.json') }}-v4
          restore-keys: |
            vcpkg-self-hosted-${{ hashFiles('vcpkg.json') }}-
            vcpkg-self-hosted-

      - name: Configure CMake
        shell: cmd
        run: |
          echo Configuring for ${{ matrix.config }} build...
          
          if "${{ matrix.config }}"=="Debug" (
            "C:\Program Files\CMake\bin\cmake.exe" --preset qt-debug
          ) else (
            "C:\Program Files\CMake\bin\cmake.exe" --preset vs-release
          )

      - name: Build Video Editor
        shell: cmd
        run: |
          setlocal EnableDelayedExpansion
          echo Building Video Editor (${{ matrix.config }})...
          
          REM Aggressive file lock cleanup for DLL deployment issues
          echo Performing comprehensive cleanup for DLL file locks...
          
          REM Kill all potential file-locking processes
          taskkill /F /IM video_editor.exe 2>nul || echo No video_editor processes to kill
          taskkill /F /IM ve_qt_preview.exe 2>nul || echo No preview processes to kill
          taskkill /F /IM cmake.exe 2>nul || echo No cmake processes to kill
          taskkill /F /IM msbuild.exe 2>nul || echo No msbuild processes to kill
          taskkill /F /IM powershell.exe 2>nul || echo No powershell processes to kill
          
          REM Set output directories based on build configuration
          if "${{ matrix.config }}"=="Debug" (
            set "OUTPUT_DIR=build\qt-debug\src\tools\video_editor\Debug"
            set "VCPKG_BIN_DIR=vcpkg_installed\x64-windows\debug\bin"
          ) else (
            set "OUTPUT_DIR=build\vs-release\src\tools\video_editor\Release"
            set "VCPKG_BIN_DIR=vcpkg_installed\x64-windows\bin"
          )
          
          REM Aggressive output directory cleanup with retry
          if exist "!OUTPUT_DIR!" (
            echo Aggressively removing output directory: !OUTPUT_DIR!
            rmdir /s /q "!OUTPUT_DIR!" 2>nul || echo Directory cleanup attempted
            ping 127.0.0.1 -n 2 >nul
            rmdir /s /q "!OUTPUT_DIR!" 2>nul || echo Second cleanup attempt completed
          )
          
          REM Clean any locked DLLs from previous failed builds
          if exist "!VCPKG_BIN_DIR!\Qt6Cored.dll" (
            echo Checking for locked Qt6 DLLs in vcpkg directory...
            attrib -r "!VCPKG_BIN_DIR!\Qt6*.dll" 2>nul || echo No Qt6 DLLs to unlock
            attrib -r "!VCPKG_BIN_DIR!\icu*.dll" 2>nul || echo No ICU DLLs to unlock
          )
          
          REM Extended filesystem settling time for Windows file handles
          echo Waiting for filesystem and handles to settle...
          ping 127.0.0.1 -n 5 >nul
          
          REM Use maximum parallel jobs for self-hosted runner
          set CORES=%NUMBER_OF_PROCESSORS%
          echo Using !CORES! parallel jobs
          
          REM Build with simplified retry logic
          echo Starting build process...
          if "${{ matrix.config }}"=="Debug" (
            "C:\Program Files\CMake\bin\cmake.exe" --build build/qt-debug --config Debug --parallel !CORES!
          ) else (
            "C:\Program Files\CMake\bin\cmake.exe" --build build/vs-release --config Release --parallel !CORES!
          )
          
          if !errorlevel! neq 0 (
            echo Build failed with error !errorlevel!, attempting retry...
            taskkill /F /IM cmake.exe 2>nul || echo No cmake processes to kill
            ping 127.0.0.1 -n 3 >nul
            
            if "${{ matrix.config }}"=="Debug" (
              "C:\Program Files\CMake\bin\cmake.exe" --build build/qt-debug --config Debug --parallel !CORES!
            ) else (
              "C:\Program Files\CMake\bin\cmake.exe" --build build/vs-release --config Release --parallel !CORES!
            )
            
            if !errorlevel! neq 0 (
              echo Both build attempts failed
              exit /b !errorlevel!
            )
          )
          
          echo Build completed successfully

      - name: Run Unit Tests
        shell: cmd
        run: |
          echo Running unit tests...
          
          if "${{ matrix.config }}"=="Debug" (
            set "testPath=build\qt-debug\tests\Debug"
          ) else (
            set "testPath=build\vs-release\tests\Release"
          )
          
          if exist "%testPath%\unit_tests.exe" (
            "%testPath%\unit_tests.exe" --reporter=xml --out=test-results-${{ matrix.config }}.xml
          ) else (
            echo WARNING: Unit tests executable not found at %testPath%
          )

      - name: Run GPU Validation Tests (Optional)
        continue-on-error: true
        shell: cmd
        run: |
          echo Running GPU system validation...
          echo Note: GPU tests may fail in CI environments without graphics hardware
          
          if "${{ matrix.config }}"=="Debug" (
            set "testPath=build\qt-debug\tests\Debug"
          ) else (
            set "testPath=build\vs-release\tests\Release"
          )
          
          if exist "%testPath%\gpu_system_validation.exe" (
            "%testPath%\gpu_system_validation.exe" > gpu-validation-${{ matrix.config }}.log 2>&1
            
            REM Check exit code
            if %errorlevel% equ 0 (
              echo GPU validation passed - graphics hardware available
            ) else if %errorlevel% equ -1 (
              echo GPU validation skipped - no graphics hardware detected ^(expected in CI^)
            ) else (
              echo WARNING: GPU validation failed with unexpected exit code %errorlevel%
            )
          ) else (
            echo GPU validation executable not found - skipping
          )

      - name: Performance Validation
        if: matrix.config == 'Release'
        shell: cmd
        run: |
          echo Running performance validation...
          
          set "perfTest=build\vs-release\tests\Release\performance_optimizer_validation.exe"
          if exist "%perfTest%" (
            "%perfTest%" > performance-validation.log 2>&1
          )

      - name: Package Application
        shell: cmd
        run: |
          echo Packaging Video Editor application...
          
          set "config=${{ matrix.config }}"
          if "%config%"=="Debug" (
            set "buildDir=build\qt-debug"
          ) else (
            set "buildDir=build\vs-release"
          )
          set "packageDir=VideoEditor-Windows-%config%"
          
          REM Create package directory
          mkdir "%packageDir%" 2>nul
          
          REM Copy main executable and dependencies
          set "exePath=%buildDir%\src\tools\video_editor\%config%"
          if exist "%exePath%" (
            xcopy "%exePath%\*" "%packageDir%\" /E /I /Y >nul
          )
          
          REM Copy tools
          for /d %%d in ("%buildDir%\src\tools\*") do (
            set "toolExe=%%d\%config%"
            if exist "!toolExe!" (
              set "toolName=%%~nd"
              mkdir "%packageDir%\tools\!toolName!" 2>nul
              xcopy "!toolExe!\*" "%packageDir%\tools\!toolName!\" /E /I /Y >nul
            )
          )
          
          REM Copy documentation
          if exist "README.md" copy "README.md" "%packageDir%\" >nul
          for %%f in (*.md) do copy "%%f" "%packageDir%\" >nul 2>&1
          
          REM Create archive using PowerShell compress (minimal usage)
          powershell -NoProfile -Command "Compress-Archive -Path '%packageDir%' -DestinationPath '%packageDir%.zip' -Force"
          
          echo Package created: %packageDir%.zip

      - name: Validate Package
        continue-on-error: true
        shell: cmd
        run: |
          setlocal EnableDelayedExpansion
          echo Validating packaged application...
          
          set "config=${{ matrix.config }}"
          set "packageDir=VideoEditor-Windows-!config!"
          
          REM Test that main executable runs
          set "mainExe=!packageDir!\video_editor.exe"
          if exist "!mainExe!" (
            echo Testing main executable...
            "!mainExe!" --help >nul 2>&1
            if !errorlevel! equ 0 (
              echo Main executable validated
            ) else (
              echo WARNING: Main executable test inconclusive ^(exit code !errorlevel!^)
              echo Note: This may be due to missing Qt plugins in CI environment
            )
          )
          
          REM Check for required DLLs
          if "!config!"=="Debug" (
            set "requiredDlls=Qt6Cored.dll Qt6Guid.dll Qt6Widgetsd.dll avcodec-61.dll"
          ) else (
            set "requiredDlls=Qt6Core.dll Qt6Gui.dll Qt6Widgets.dll avcodec-61.dll"
          )
          
          for %%d in (!requiredDlls!) do (
            if exist "!packageDir!\%%d" (
              echo Found required DLL: %%d
            ) else (
              echo WARNING: Missing required DLL: %%d
            )
          )
          
          REM Check for platform plugins
          if exist "!packageDir!\platforms\qwindows*.dll" (
            echo Platform plugins found
          ) else (
            echo WARNING: Platform plugins missing - this will cause Qt initialization errors
          )

      - name: Collect Artifacts
        if: always()
        shell: cmd
        run: |
          REM Collect build logs and profiling data
          echo Creating artifacts directory...
          mkdir artifacts-${{ matrix.config }} 2>nul
          
          REM Copy profiling data
          if exist profiling*.json (
            for %%f in (profiling*.json) do copy "%%f" artifacts-${{ matrix.config }}\
          )
          
          REM Copy test results  
          if exist *test*.xml (
            for %%f in (*test*.xml) do copy "%%f" artifacts-${{ matrix.config }}\
          )
          
          REM Copy validation logs
          if exist *validation*.log (
            for %%f in (*validation*.log) do copy "%%f" artifacts-${{ matrix.config }}\
          )
          
          REM Copy CMake logs on failure
          if "%BUILD_FAILED%"=="true" (
            if exist build\*\CMakeFiles\CMakeOutput.log (
              for %%f in (build\*\CMakeFiles\CMakeOutput.log) do copy "%%f" artifacts-${{ matrix.config }}\
            )
          )
          
          echo Artifacts collected

      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: video-editor-windows-${{ matrix.config }}-${{ github.run_number }}
          path: |
            VideoEditor-Windows-${{ matrix.config }}.zip
            artifacts-${{ matrix.config }}
          retention-days: 30

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-windows-${{ matrix.config }}-${{ github.run_number }}
          path: |
            test-results-*.xml
            *validation*.log
          if-no-files-found: ignore

      - name: Performance Report
        if: matrix.config == 'Release'
        shell: cmd
        run: |
          echo === Performance Summary ===
          
          REM Check if profiling data exists
          if exist "profiling.json" (
            echo Build completed with performance data available
            
            REM Extract key metrics if available using findstr
            findstr "frame_time_ms" profiling.json >nul 2>&1
            if %errorlevel% equ 0 (
              echo Performance metrics available in profiling.json
            )
          )
          
          echo Build completed successfully

      - name: Cleanup Build Directory
        if: always()
        shell: cmd
        run: |
          REM Clean up large build files to save runner disk space
          REM Keep only essential artifacts that were already uploaded
          
          echo Cleaning up build directory...
          
          REM Remove intermediate build files but keep packaged artifacts
          if exist build (
            echo Removing CMake intermediate files...
            for /d /r build %%d in (CMakeFiles) do (
              if exist "%%d" rmdir /s /q "%%d" 2>nul
            )
            
            echo Removing object files and temporary build artifacts...
            del /s /q build\*.obj 2>nul
            del /s /q build\*.pdb 2>nul  
            del /s /q build\*.exp 2>nul
            del /s /q build\*.lib 2>nul
          )
          
          echo Cleanup completed

  notify-status:
    name: Build Status Notification
    runs-on: [self-hosted, windows]
    needs: build-windows-self-hosted
    if: always()
    steps:
      - name: Report Build Status
        shell: cmd
        run: |
          set status=${{ needs.build-windows-self-hosted.result }}
          set runUrl=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          echo === Build Complete ===
          echo Status: %status%
          echo Run URL: %runUrl%
          echo Commit: ${{ github.sha }}
          echo Branch: ${{ github.ref_name }}
          echo.
          
          if "%status%"=="success" (
            echo All builds completed successfully!
          ) else (
            echo Build failed - check artifacts for details
          )