name: pre-build-linux
"on":
  push:
    tags: [ "v*" ]
    branches: [ main, master ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-linux:
    name: self-hosted ${{ matrix.config }} build
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        config: [ Debug ]
    env:
      VCPKG_FORCE_SYSTEM_BINARIES: 1
      VCPKG_MAX_CONCURRENCY: 2
      VCPKG_ROOT: /home/klop51/vcpkg
      VCPKG_DEFAULT_TRIPLET: x64-linux
      CMAKE_MAKE_PROGRAM: /usr/bin/make
    steps:
      - uses: actions/checkout@v4

      - name: Install Linux dependencies
        run: |
          # Install latest CMake from Kitware
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null
          
          # Install latest Clang
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" | sudo tee /etc/apt/sources.list.d/llvm.list
          
          sudo apt-get update
          
          # Install latest versions
          sudo apt-get remove cmake -y || true
          sudo apt-get install -y cmake ninja-build make
          sudo apt-get install -y clang-18 clang-tidy-18 clang-format-18
          
          # Verify make and ninja are installed
          which make || echo "Make not found in PATH"
          make --version || echo "Make version check failed"
          which ninja || echo "Ninja not found in PATH"
          ninja --version || echo "Ninja version check failed"
          
          # Set up clang alternatives
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-18 100
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-18 100
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-18 100
          
          # Install basic build tools
          sudo apt-get install -y build-essential pkg-config curl zip unzip tar cmake ninja-build
          # Install autotools chain
          sudo apt-get install -y autoconf automake libtool libtool-bin libltdl-dev autotools-dev m4 autoconf-archive gperf
          # Install X11/OpenGL development packages for Qt
          sudo apt-get install -y libx11-dev libxext-dev libxfixes-dev libxrender-dev libxrandr-dev libxi-dev
          sudo apt-get install -y libxcb1-dev libxkbcommon-dev libxkbcommon-x11-dev
          sudo apt-get install -y mesa-common-dev libgl1-mesa-dev
          # Install additional XCB development packages required by Qt
          sudo apt-get install -y libx11-xcb-dev libxcb-xinput-dev libxcb-xkb-dev libxcb-randr0-dev
          sudo apt-get install -y libxcb-xinerama0-dev libxcb-render0-dev libxcb-render-util0-dev
          sudo apt-get install -y libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev
          sudo apt-get install -y libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev
          # Install remaining XCB system libraries for TEST_xcb_syslibs
          sudo apt-get install -y libxcb-shm0-dev libxcb-util-dev \
            libx11-xcb-dev libxcb1-dev libxcb-util-dev libxcb-shm0-dev \
            libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev \
            libxcb-render0-dev libxcb-render-util0-dev libxcb-randr0-dev \
            libxcb-xinerama0-dev libxcb-xfixes0-dev libxcb-sync-dev \
            libxcb-xkb-dev libxcb-xinput-dev libglu1-mesa-dev libxrender-dev libxi-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libegl1-mesa-dev \
            libglvnd-dev libgl1-mesa-dev libgles2-mesa-dev \
            libxcb-cursor-dev
          # Install additional tools
          sudo apt-get install -y nasm

      - name: Verify toolchain
        run: |
          set -x
          echo "=== Verifying installed tools ==="
          which cmake && cmake --version
          which ninja && ninja --version
          which make && make --version
          which clang && clang --version
          which clang++ && clang++ --version
          which clang-tidy && clang-tidy --version
          autoconf --version
          automake --version
          libtool --version
          pkg-config --version
          echo "=== CMAKE_MAKE_PROGRAM check ==="
          export CMAKE_MAKE_PROGRAM=$(which make)
          echo "CMAKE_MAKE_PROGRAM=$CMAKE_MAKE_PROGRAM"
          echo "=== Environment ==="
          echo "CC=$CC"
          echo "CXX=$CXX"

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            /home/klop51/vcpkg/installed
            /home/klop51/vcpkg/buildtrees
          key: vcpkg-linux-${{ hashFiles('vcpkg.json') }}-v3
          restore-keys: |
            vcpkg-linux-${{ hashFiles('vcpkg.json') }}-
            vcpkg-linux-

      - name: Setup vcpkg
        run: |
          export CMAKE_MAKE_PROGRAM=/usr/bin/make
          if [ ! -d "$HOME/vcpkg" ]; then
            git clone https://github.com/Microsoft/vcpkg.git $HOME/vcpkg
          else
            echo "vcpkg directory already exists, updating..."
            cd $HOME/vcpkg && git pull
          fi
          cd $HOME/vcpkg && ./bootstrap-vcpkg.sh

      - name: Install ccache
        run: |
          sudo apt-get update && sudo apt-get install -y ccache

      - name: ccache cache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ccache-linux-${{ matrix.config }}-${{ hashFiles('**/CMakeLists.txt', 'vcpkg.json') }}
          restore-keys: |
            ccache-linux-${{ matrix.config }}-
            ccache-linux-

      - name: Configure
        run: |
          export CC=clang
          export CXX=clang++
          export CMAKE_MAKE_PROGRAM=/usr/bin/make
          echo "CMAKE_MAKE_PROGRAM=$CMAKE_MAKE_PROGRAM"
          # Use Linux-specific preset with Unix Makefiles
          cmake --preset linux-debug \
            -DVCPKG_TARGET_TRIPLET=x64-linux \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DCMAKE_MAKE_PROGRAM="$CMAKE_MAKE_PROGRAM" \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: |
          cmake --build build/linux-debug --parallel 2

      - name: Run clang-tidy
        if: matrix.config == 'Debug'
        run: |
          echo "Running clang-tidy with full compilation database..."
          if [ -f "build/linux-debug/compile_commands.json" ]; then
            echo "Found compile_commands.json, running clang-tidy..."
            python3 scripts/clang_tidy_check.py || echo "clang-tidy completed with warnings"
          else
            echo "⚠️ compile_commands.json not found!"
            exit 1
          fi

      - name: Show vcpkg logs on failure
        if: failure()
        run: |
          echo "=== VCPKG BUILD LOGS ==="
          find build -path '*/buildtrees/*/*.log' -print -exec echo "=== {} ===" \; -exec tail -n 100 {} \; 2>/dev/null || true
          echo "=== VCPKG MANIFEST INSTALL LOG ==="
          if [ -f "build/linux-debug/vcpkg-manifest-install.log" ]; then
            tail -n 200 "build/linux-debug/vcpkg-manifest-install.log"
          fi

      - name: Test (if enabled)
        run: |
          cd build/linux-debug && ctest --output-on-failure || echo "Tests not available or failed"

      - name: Package artifacts
        if: always()
        run: |
          mkdir -p dist
          if [ -d "build/linux-debug" ]; then cp -r build/linux-debug/* dist/ 2>/dev/null || true; fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-latest-${{ matrix.config }}-artifacts
          path: dist
          retention-days: 7

      - name: Upload profiling data (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: profiling-ubuntu-latest-${{ matrix.config }}
          path: |
            **/profiling.json
            **/profiling_*.json
          if-no-files-found: ignore

      - name: ccache stats
        run: ccache -s || true

      - name: Generate failure draft (on failure)
        if: failure()
        run: |
          python scripts/ci_failure_scrape.py --log build/*/Testing/Temporary/LastTest.log --out error_drafts --append-main --flaky-list tests/FLAKY_TESTS.txt --dedupe-window 5 --failure-history failure_history.json --auto-classify-flaky || true
          if [ -f failure_history.json ]; then
            echo "Captured failure history"
          fi

      - name: Upload failure draft artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failure-draft-ubuntu-latest-${{ matrix.config }}
          path: error_drafts
          if-no-files-found: ignore
