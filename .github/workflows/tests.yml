name: tests
"on":
  push:
    branches: [ main, master ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Fast Tests & Lint
    runs-on: ubuntu-latest
  # timeout-minutes removed to allow clang-tidy to run without interruption
    permissions:
      contents: read
    env:
      VCPKG_FORCE_SYSTEM_BINARIES: 1
      VCPKG_MAX_CONCURRENCY: 1
    steps:
      - uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          # Install basic build tools first
          sudo apt-get install -y build-essential pkg-config curl zip unzip tar cmake ninja-build
          # Install autotools chain
          sudo apt-get install -y autoconf automake libtool libltdl-dev autotools-dev m4 autoconf-archive gperf
          # Install additional tools
          sudo apt-get install -y nasm clang-tidy

      - name: Verify autotools installation
        run: |
          echo "Checking autotools installation..."
          autoconf --version
          automake --version
          libtool --version
          pkg-config --version
          echo "libltdl check:"
          dpkg -l | grep libltdl

      - name: Cache vcpkg
        uses: actions/cache@v4
        with:
          path: |
            $HOME/vcpkg/installed
            $HOME/vcpkg/buildtrees
          key: vcpkg-ubuntu-${{ hashFiles('vcpkg.json') }}-v3
          restore-keys: |
            vcpkg-ubuntu-${{ hashFiles('vcpkg.json') }}-
            vcpkg-ubuntu-

      - name: Setup vcpkg
        shell: bash
        run: |
          git clone https://github.com/Microsoft/vcpkg.git $HOME/vcpkg
          cd $HOME/vcpkg && ./bootstrap-vcpkg.sh
          echo "VCPKG_ROOT=$HOME/vcpkg" >> $GITHUB_ENV
          echo "VCPKG_DEFAULT_TRIPLET=x64-linux" >> $GITHUB_ENV

      - name: Update vcpkg
        shell: bash
        run: |
          cd $HOME/vcpkg
          ./vcpkg update
          ./vcpkg upgrade --no-dry-run

      - name: Setup CMake compiler environment
        run: |
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          gcc --version
          g++ --version
          cmake --version

      - name: Configure (minimal for clang-tidy)
        env:
          CC: gcc
          CXX: g++
        run: |
          echo "VCPKG_ROOT: $VCPKG_ROOT"
          echo "VCPKG_DEFAULT_TRIPLET: $VCPKG_DEFAULT_TRIPLET"
          cmake --preset dev-debug -G Ninja -DVCPKG_TARGET_TRIPLET=x64-linux -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DENABLE_QT_TOOLS=OFF

      - name: Run clang-tidy
        run: |
          echo "Checking if compile_commands.json exists..."
          ls -la build/dev-debug/
          if [ -f "build/dev-debug/compile_commands.json" ]; then
            echo "Found compile_commands.json, running clang-tidy..."
            python3 scripts/clang_tidy_check.py
          else
            echo "⚠️ compile_commands.json not found!"
            echo "This is expected on Windows builds using Visual Studio generator."
            echo "Clang-tidy checks are performed on Linux CI only."
            echo "✅ Skipping clang-tidy check (not available)"
          fi

      - name: Show vcpkg logs on failure
        if: failure()
        run: |
          echo "=== VCPKG BUILD LOGS ==="
          find build -path '*/buildtrees/*/*.log' -print -exec echo "=== {} ===" \; -exec tail -n 100 {} \; 2>/dev/null || true
          echo "=== VCPKG MANIFEST INSTALL LOG ==="
          if [ -f "build/dev-debug/vcpkg-manifest-install.log" ]; then
            tail -n 200 "build/dev-debug/vcpkg-manifest-install.log"
          fi

      - name: Simple configure test (no FFmpeg, no presets)
        run: |
          mkdir -p build/lint-test
          cd build/lint-test
          cmake ../.. -GNinja -DCMAKE_BUILD_TYPE=Debug -DENABLE_FFMPEG=OFF -DENABLE_TESTS=OFF -DENABLE_TOOLS=OFF

      - name: Check for exception policy violations
        run: |
          echo "Checking core performance modules for exception policy violations..."
          if grep -r "throw" src/media_io src/decode src/playback src/audio src/render src/fx src/cache src/gfx --include="*.cpp" --include="*.hpp" | grep -v "// EXCEPTION_POLICY_OK"; then
            echo "❌ Exception policy violation found in core performance modules!"
            echo "Core modules (media_io, decode, playback, audio, render, fx, cache, gfx) must remain exception-free per DR-0003"
            exit 1
          else
            echo "✅ Exception policy check passed"
          fi

  # Optional: Add unit tests if you have them
  # unit-tests:
  #   name: Unit Tests
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 15
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Run unit tests
  #       run: |
  #         # Add your test runner here
  #         # e.g., ctest --test-dir build/dev-debug
